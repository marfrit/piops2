.program readps2
;    irq nowait 0
.wrap_target
    wait 1 irq 0
    set pindirs 0
    wait 0     GPIO 17 [14]
    in   pins, 1
    wait 1     GPIO 17
    IRQ nowait 0
.wrap

.program pinstate
;    irq nowait 0
.wrap_target
    pull
    wait 1 irq 0
    set pindirs, 3
    out pins, 2
    IRQ nowait 0
;    set pindirs 0
.wrap

.program writeps2
    irq nowait 0
.wrap_target
    pull
    wait 1 irq 0
    set pindirs, 3
    set pins, 2
    wait 0 GPIO 17
    set pindirs, 1
    set x, 8
outbits:
    nop [2]
    out pins, 1
    wait 1 GPIO 17
    wait 0 GPIO 17
    jmp x-- outbits
    nop [2]
    set pins, 1 [5]
    set pindirs 0
    wait 0 GPIO 16
;    wait 0 GPIO 17
;    wait 1 GPIO 17
    wait 1 GPIO 16
    set pindirs, 0
    irq nowait 0
.wrap

% c-sdk {
static inline void readps2_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = readps2_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);

    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_set_pins(&c, pin, 2);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_in_shift(
        &c,
        true, // Shift-to-right = true
        true, // Autopush enabled
        11    // Autopush threshold = 11 (start + 8 bits data + parity + stop)
    );

    sm_config_set_clkdiv(&c, 125); // one cycle is 1 microsecond

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void pinstate_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = pinstate_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);

    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_set_pins(&c, pin, 2);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_out_shift(
        &c,
        true,  // Shift-to-right = true
        false, // Autopull disabled
        1      // Autopull threshold = 1
    );

    sm_config_set_clkdiv(&c, 625); // one cycle is 5 microseconds

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);

}

static inline void writeps2_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = writeps2_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);

    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_set_pins(&c, pin, 2);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_out_shift(
        &c,
        true,  // Shift-to-right = true
        false, // Autopull disabled
        9      // Autopull threshold = 1
    );

    sm_config_set_clkdiv(&c, 625); // one cycle is 5 microseconds

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);

}
%}
