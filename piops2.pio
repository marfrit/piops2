.program readps2
.wrap_target
    set  x,    10
    IRQ wait 0
read_bit:
    wait 0     GPIO 17 
    nop  [2]
    in   pins, 1
    wait 1     GPIO 17
    jmp  x--,  read_bit
    IRQ clear 0
    push
.wrap

% c-sdk {
static inline void readps2_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = readps2_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);

    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_set_pins(&c, pin, 2);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_in_shift(
        &c,
        true, // Shift-to-right = true
        true, // Autopush enabled
        11    // Autopush threshold = 11 (start + 8 bits data + parity + stop)
    );

    sm_config_set_clkdiv(&c, 625); // one cycle is 5 microseconds

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

.program inhibit
.wrap_target
    pull 
    IRQ nowait 0
    set pindirs, 2
    set pins, 0 [22] ; add
    set pindirs, 0
    out NULL, 1
    IRQ clear 0
.wrap


% c-sdk {
static inline void inhibit_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = inhibit_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);

    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_set_pins(&c, pin, 2);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_out_shift(
        &c,
        true,  // Shift-to-right = true
        false, // Autopull disabled
        1      // Autopull threshold = 1 
    );

    sm_config_set_clkdiv(&c, 625); // one cycle is 5 microseconds

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);

}
%}

.program writeps2
.wrap_target
    pull 
;    IRQ wait 0
    set pindirs, 1
    set x, 9
    set pins, 0
write_bit:
    wait 0     GPIO 17
    out  pins, 1
    wait 1     GPIO 17
    jmp  x--,  write_bit
;    out NULL, 10
;    IRQ clear 0
    set pindirs, 0
.wrap


% c-sdk {
static inline void writeps2_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = writeps2_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);

    sm_config_set_out_pins(&c, pin, 2);
    sm_config_set_set_pins(&c, pin, 2);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_out_shift(
        &c,
        true,  // Shift-to-right = true
        false, // Autopull disabled
        10      // Autopull threshold = 11 
    );

    sm_config_set_clkdiv(&c, 625); // one cycle is 5 microseconds

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);

}
%}
