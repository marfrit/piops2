.program readps2
.wrap_target
    set  x,    10
read_bit:
    wait 0     GPIO 17 
    nop  [2]
    in   pins, 1
    wait 1     GPIO 17
    jmp  x--,  read_bit
    push
.wrap
    
.program writeps2
.wrap_target
    pull
    set x, 9
    set pindirs, 1      ; set CLK to output, DTA input
    mov pins, NULL [19] ; set CLK low
    set pindirs, 3      ; set DTA to output, CLK input
    mov pins, NULL
    set pindirs, 2
    nop [8]
write_bit:
    wait   0  GPIO 17   ; wait for low CLK
    out pins, 1 [3]     ; output BIT from OSR
    wait   1  GPIO 17
    jmp x--, write_bit  ; do this 11 times
    set pindirs, 0
    wait   0  GPIO 17
    in pins, 1
    push
.wrap

% c-sdk {
static inline void readps2_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = readps2_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_in_shift(
        &c,
        true, // Shift-to-right = true
        true,  // Autopush enabled
        11      // Autopush threshold = 11 (start + 8 bits data + parity + stop)
    );

    sm_config_set_clkdiv(&c, 625); // one cycle is 8.192 microseconds

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}